package wormhole;

option java_package = "wormhole.game.network";
option java_outer_classname = "GameProto";

import "player.proto";

//Indicates the kind of message being sent/received.
enum MessageType{
	MAP = 0;
	ATTACK = 1;
	UNIT_ARRIVAL = 2;
	ALL_UNIT_CHANGE = 3;
	OWNER_CHANGE = 4;
	DISCONNECT = 5;
	SEND_PLAYER_DATA = 6;
	PLAYER_DATA = 7;
	NEW_UNIT_GROUP = 8;
	UNIT_GROUP_POSITION = 9;
	LEAVE_GAME = 10;
	CONFIRM_LEAVE_GAME = 11;
	PLAYER_VICTORY = 12;
}
message IncomingMessageType{
	required MessageType type = 1;
}
//Stores data on a WormholeMap.
message Map{
	required int32 width = 3;
	required int32 height = 4;
	repeated MapGridSpace space=1;
	repeated Player player = 2;
}

//Represents a space on the map with something present
//A Map message does not contain a MapGridSpace message
//for each position in the grid.  Instead, messages are
//only sent for each space containing something.
message MapGridSpace{
	required int32 x = 4;
	required int32 y = 5;
	required int32 productivity = 1;
	required int32 defense = 2;
	optional int32 owner_id = 6;
	repeated UnitInfo unit_info = 7;
}
message UnitInfo{
	required int32 owner = 1;
	required int32 count = 2;
}
message Victory{
	required int32 winner_id = 1;
}
message Attack{
	required int32 fromX = 1;
	required int32 fromY = 2;
	required int32 toX = 3;
	required int32 toY = 4;
}

message UnitArrival{
	required int32 x = 1;
	required int32 y = 2;
	required UnitInfo arrived = 3;
}
message AllUnitChange{
	required int32 x = 1;
	required int32 y = 2;
	repeated UnitInfo unit_info = 3;
}
message OwnerChange{
	required int32 x = 1;
	required int32 y = 2;
	required int32 new_owner_id = 3;
}
message NewUnitGroup{
	required int32 id = 1;
	required int32 owner = 4;
	required int32 count = 5;
	required int32 x = 2;
	required int32 y = 3;
}
message UnitGroupPosition{
	required int32 id = 1;
	optional int32 x = 2;
	optional int32 y = 3;
	optional bool complete = 4 [default = false];
}